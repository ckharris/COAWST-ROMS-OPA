#include "cppdefs.h"
      MODULE wdrift_floats_mod
!
!
!================================================== Dmitry Dukhovskoy  ===
!
!=======================================================================
!                                                                      !
!  These routines compute wind drift linearly added to oil U,V fields  !
!   locations: wnudg                                                   !
!                                                                      !
!  Reference: Samuels et al., 1982 wind drift model with wind-dependt  !
!  deflection angle   + our BOEM report, 2017                          !
!                                                                      !
!=======================================================================
!
      implicit none
!
      PRIVATE
      PUBLIC  :: wdrift_floats
!
      CONTAINS
!
!***********************************************************************
      SUBROUTINE wdrift_floats (ng, Lstr, Lend, my_thread)
!***********************************************************************
!
      USE mod_param
      USE mod_parallel
      USE mod_forces
      USE mod_grid
      USE mod_floats
      USE mod_stepping
!
!  Imported variable declarations.
!
      integer, intent(in) :: ng, Lstr, Lend
!      logical, intent(in) :: Predictor

# ifdef ASSUMED_SHAPE
      logical, intent(in) :: my_thread(Lstr:)
# else
      logical, intent(in) :: my_thread(Lstr:Lend)
# endif
!
!  Local variable declarations.
!
!# include "tile.h"
      integer :: LBi, UBi, LBj, UBj
      integer :: Istr, Iend, Jstr, Jend

! Set tile array bounds.
!
      LBi=LBOUND(GRID(ng)%h,DIM=1)
      UBi=UBOUND(GRID(ng)%h,DIM=1)
      LBj=LBOUND(GRID(ng)%h,DIM=2)
      UBj=UBOUND(GRID(ng)%h,DIM=2)

      Istr=BOUNDS(ng)%Istr(MyRank)
      Iend=BOUNDS(ng)%Iend(MyRank)
      Jstr=BOUNDS(ng)%Jstr(MyRank)
      Jend=BOUNDS(ng)%Jend(MyRank)
!

# ifdef PROFILE
      CALL wclock_on (ng, iNLM, 10, __LINE__, __FILE__)
# endif
      CALL wdrift_floats_tile (ng, Lstr, Lend,                      &
     &                        LBi, UBi, LBj, UBj,                       & 
     &                        Istr, Iend, Jstr, Jend,                   &
     &                        nfm3(ng), nfm2(ng), nfm1(ng), nf(ng),     &
     &                        nfp1(ng),                                 &
     &                        my_thread,                                &
     &                        DRIFTER(ng) % bounded,                    &
     &                        DRIFTER(ng) % Tinfo,                      &
     &                        FORCES(ng) % Uwind,                       &
     &                        FORCES(ng) % Vwind,                       &
     &                        DRIFTER(ng) % track)

# ifdef PROFILE
      CALL wclock_off (ng, iNLM, 10, __LINE__, __FILE__)
# endif

      RETURN
      END SUBROUTINE wdrift_floats


!
!***********************************************************************
      SUBROUTINE wdrift_floats_tile (ng, Lstr, Lend,                &
     &                              LBi, UBi, LBj, UBj,                 &
     &                              Istr, Iend, Jstr, Jend,             &
     &                              nfm3, nfm2, nfm1, nf, nfp1,         &
     &                              my_thread, bounded,                 &
     &                              Tinfo,  Uwind, Vwind, track)  
!***********************************************************************
!
      USE mod_param
      USE mod_parallel
      USE mod_floats
      USE mod_grid
      USE mod_scalars
      USE mod_ncparam
!      USE mod_forces

      USE interp_floats_mod
# ifdef DISTRIBUTE
      USE distribute_mod, ONLY : mp_bcastf
# endif

!
!  Imported variable declarations.
!
      integer, intent(in) :: ng, Lstr, Lend
      integer, intent(in) :: LBi, UBi, LBj, UBj
!      integer, intent(in) :: IminS, ImaxS, JminS, JmaxS
      integer, intent(in) :: Istr, Iend, Jstr, Jend 
      integer, intent(in) :: nfm3, nfm2, nfm1, nf, nfp1
!      logical, intent(in) :: Predictor
!
# ifdef ASSUMED_SHAPE
      logical, intent(in) :: bounded(:)
      logical, intent(in) :: my_thread(Lstr:)

      real(r8), intent(in) :: Tinfo(0:,:)
      real(r8), intent(in) :: Uwind(LBi:,LBj:)
      real(r8), intent(in) :: Vwind(LBi:,LBj:)
      real(r8), intent(inout) :: track(:,0:,:)
# else
      logical, intent(in) :: bounded(Nfloats(ng))
      logical, intent(in) :: my_thread(Lstr:Lend)

      real(r8), intent(in) :: Tinfo(0:izrhs,Nfloats(ng))
      real(r8), intent(in) :: Uwind(LBi:UBi,LBj:UBj)
      real(r8), intent(in) :: Vwind(LBi:UBi,LBj:UBj)
      
      real(r8), intent(inout) :: track(NFV(ng),0:NFT,Nfloats(ng))
# endif
!
!  Local variable declarations.
!
# ifdef MASKING
      logical, parameter :: Lmask = .TRUE.
# else
      logical, parameter :: Lmask = .FALSE.
# endif
      integer :: i, j, l, nfindx
      integer :: nsurf

      real(r8), parameter :: Cwnd=0.035_r8 ! constant for now - make f(layer thickness)
      real(r8), parameter :: nuk=1.05e-6_r8  ! kinem visc of sea water, constant

      real(r8), dimension(Istr:Iend,Jstr:Jend) :: Udrft
      real(r8), dimension(Istr:Iend,Jstr:Jend) :: Vdrft
      real(r8) :: wnudg(Lstr:Lend)  ! nudging not used=0, required by interp_floats

      real(r8) :: HalfDT
      real(r8) :: cff, cff1, cff2, cff3, cff4
      real(r8) :: zoil, w10, theta

!# include "set_bounds.h"

!
!-----------------------------------------------------------------------
!  Compute wind drift and adjust oil float position
!-----------------------------------------------------------------------
!
!  Set float time level index to process.
!
      nfindx=nf
!      IF (Predictor) THEN
!        nfindx=nf
!      ELSE
!        nfindx=nfp1
!      END IF
!
!  Only for surfaced oil !
!  If no surfaced oil - quit
!
      nsurf=0
      DO l=Lstr,Lend
        wnudg(l)=0.0_r8
        IF (my_thread(l).and.bounded(l)) THEN
!          IF (Predictor) THEN
!            zoil=track(idpth,nf,l)
!          ELSE
!            zoil=track(idpth,nfp1,l)
!          ENDIF
!
          zoil=track(idpth,nf,l)

          IF (abs(zoil).le.2.0) THEN
            nsurf=nsurf+1
          ELSE

          ENDIF

        ENDIF ! 
      ENDDO ! 

      IF (nsurf.eq.0) GOTO 100
!
! For now, wind fields are taken at time nf, should be taken at the
! next time step, introduces small error in the drift nudg (lagging 
! in time), will need to be fixed in the future application
!
! Compute wind drift with wind-dependent deflection angle
! Wind-drag (Cw) coefficient is fixed at the moment
! In the future, needs to be a function of the upper-most
! layer thickness (inversly proportional), thinner ocean layer
! has more wind effect already in the ocean current and
! wind correction has to be reduced - discussed in our
! BOEM report
! 
! Kinematic viscosity of sea water is a constant here, 
! possible improvement: compare with the model value
!

      DO j=Jstr,Jend
        DO i=Istr,Iend
          w10=sqrt(Uwind(i,j)*Uwind(i,j)+Vwind(i,j)*Vwind(i,j))
          theta=-25.0_r8*exp(-1.0e-8_r8*w10**3/(9.8_r8*nuk))
          theta=theta*pi/180.0_r8
          Udrft(i,j)=Cwnd*(cos(theta)*Uwind(i,j)-sin(theta)*Vwind(i,j)) ! rotate by theta angle and scale by Cwnd
          Vdrft(i,j)=Cwnd*(sin(theta)*Uwind(i,j)+cos(theta)*Vwind(i,j))
        ENDDO
      ENDDO

!
! Interpolate wind fields to float locations
! in terms of "horiztonal slopes", i.e. normalized by grid cell distance
! to give rate of change in terms of index space
! such that dt*ixwnd = index change
!
      CALL interp_floats (ng, LBi, UBi, LBj, UBj, 1, 1,                 &
     &                    Lstr, Lend, nfindx, ixwnd, isUbar,            &
     &                    -r2dvar, Lmask, spval, wnudg,                 &
     &                    GRID(ng) % pm,                                &
     &                    GRID(ng) % pn,                                &
# ifdef SOLVE3D
     &                      GRID(ng) % Hz,                              & 
# endif
#  ifdef MASKING
     &                    GRID(ng) % rmask,                             &
#  endif
     &                    Udrft, my_thread, bounded, track)

      CALL interp_floats (ng, LBi, UBi, LBj, UBj, 1, 1,                 &
     &                    Lstr, Lend, nfindx, iywnd, isUbar,            &
     &                    -r2dvar, Lmask, spval, wnudg,                 &
     &                    GRID(ng) % pm,                                &
     &                    GRID(ng) % pn,                                &
# ifdef SOLVE3D
     &                      GRID(ng) % Hz,                              & 
# endif
#  ifdef MASKING
     &                    GRID(ng) % rmask,                             &
#  endif
     &                    Vdrft, my_thread, bounded, track)

!
! Compute new float horizontal position.
!
      DO l=Lstr,Lend
        IF (my_thread(l).and.bounded(l)) THEN
          zoil=track(idpth,nf,l)
          IF (abs(zoil).le.2.0_r8) CYCLE
          track(ixgrd,nfp1,l)=track(ixgrd,nf,l)+                        &
     &                        dt(ng)*track(ixwnd,nf,l)
          track(iygrd,nfp1,l)=track(iygrd,nf,l)+                        &
     &                        dt(ng)*track(iywnd,nf,l)
        ENDIF
      ENDDO


 100  CONTINUE

      RETURN
      END SUBROUTINE wdrift_floats_tile

                                                                                                                        
      END MODULE wdrift_floats_mod
