!
!svn $Id: sedflocs_mod.h 429 2009-12-20 17:30:26Z arango $
!================================================== Hernan G. Arango ===
!  Copyright (c) 2002-2017 The ROMS/TOMS Group        John C. Warner   !
!    Licensed under a MIT/X style license                              !
!    See License_ROMS.txt                                              !
!=======================================================================
!                                                                      !
!  Sediment opa Model Kernel Variables:                               !
!                                                                      !
#if defined SEDIMENT && defined SED_OPA
!  bottom         Exposed sediment layer properties:                   !
!                   bottom(:,:,isd50) => mean grain diameter           !
!                   bottom(:,:,idens) => mean grain density            !
!                   bottom(:,:,iwsed) => mean settling velocity        !
!                   bottom(:,:,itauc) => mean critical erosion stress  !
#endif
!                                                                      !
!=======================================================================

      USE mod_kinds

      implicit none


      TYPE T_SEDOPA

#if defined SEDIMENT && defined SED_OPA
      real(r8), pointer :: f_diam(:)
      real(r8), pointer :: f_vol(:)
      real(r8), pointer :: f_rho(:)
      real(r8), pointer :: f_mass(:)

      real(r8), pointer :: oil_diam(:)
      real(r8), pointer :: oil_vol(:)
      real(r8), pointer :: oil_rho(:)
      real(r8), pointer :: oil_mass(:)

      real(r8), pointer :: opa_diam(:)
      real(r8), pointer :: opa_vol(:)
      real(r8), pointer :: opa_rho(:)
      real(r8), pointer :: opa_mass(:)

      real(r8),pointer :: opa_g1(:,:,:)
      real(r8),pointer :: oil_l1(:,:)
      real(r8),pointer :: sed_l1(:,:)
      real(r8),pointer :: opa_coll_prob1(:,:)
      real(r8),pointer :: opa_oil1(:,:,:)

      real(r8),pointer :: opa_g2(:,:,:)
      real(r8),pointer :: opa_l2(:,:)
      real(r8),pointer :: oil_l2(:,:)
      real(r8),pointer :: opa_coll_prob2(:,:)
      real(r8),pointer :: opa_oil2(:,:,:)

      real(r8),pointer :: opa_g3(:,:,:)
      real(r8),pointer :: opa_l3(:,:)
      real(r8),pointer :: sed_l3(:,:)
      real(r8),pointer :: opa_coll_prob3(:,:)

      real(r8),pointer :: sed_g4(:,:,:)
      real(r8),pointer :: sed_l4(:,:)
      real(r8),pointer :: opa_coll_prob4(:,:)
#endif
      END TYPE T_SEDOPA

      TYPE (T_SEDOPA), allocatable :: SEDOPA(:)

      CONTAINS

      SUBROUTINE allocate_sedopa (ng, LBi, UBi, LBj, UBj)

!
!=======================================================================
!                                                                      !
!  This routine allocates all variables in the module for all nested   !
!  grids.                                                              !
!                                                                      !
!=======================================================================
!
      USE mod_param
      USE mod_sediment
!
!  Imported variable declarations.
!
      integer, intent(in) :: ng, LBi, UBi, LBj, UBj

      integer, parameter :: NSED=2
      integer, parameter :: NOIL=1
      integer, parameter :: NOPA=4
!
!-----------------------------------------------------------------------
!  Allocate structure variables.
!-----------------------------------------------------------------------
!
      IF (ng.eq.1) allocate ( SEDOPA(Ngrids) )
!
!  Nonlinear model state.

#if defined SEDIMENT && defined SED_OPA
      allocate (SEDOPA(ng) % f_diam(NSED))
      allocate (SEDOPA(ng) % f_vol(NSED))
      allocate (SEDOPA(ng) % f_rho(NSED))
      allocate (SEDOPA(ng) % f_mass(0:NSED+1))

      allocate (SEDOPA(ng) % oil_diam(NOIL))
      allocate (SEDOPA(ng) % oil_vol(NOIL))
      allocate (SEDOPA(ng) % oil_rho(NOIL))
      allocate (SEDOPA(ng) % oil_mass(NOIL))

      allocate (SEDOPA(ng) % opa_diam(NOPA))
      allocate (SEDOPA(ng) % opa_vol(NOPA))
      allocate (SEDOPA(ng) % opa_rho(NOPA))
      allocate (SEDOPA(ng) % opa_mass(0:NOPA+1))

      allocate (SEDOPA(ng) %  opa_g1(NOIL,NSED,NOPA))
      allocate (SEDOPA(ng) %  oil_l1(NOIL,NSED))
      allocate (SEDOPA(ng) %  sed_l1(NOIL,NSED))
      allocate (SEDOPA(ng) %  opa_coll_prob1(NOIL,NSED))
      allocate (SEDOPA(ng) %  opa_oil1(NOIL,NSED,NOPA))

      allocate (SEDOPA(ng) %  opa_g2(NOIL,NOPA,NOPA))
      allocate (SEDOPA(ng) %  opa_l2(NOIL,NOPA))
      allocate (SEDOPA(ng) %  oil_l2(NOIL,NOPA))
      allocate (SEDOPA(ng) %  opa_coll_prob2(NOIL,NOPA))
      allocate (SEDOPA(ng) %  opa_oil2(NOIL,NOPA,NOPA))

      allocate (SEDOPA(ng) %  opa_g3(NSED,NOPA,NOPA))
      allocate (SEDOPA(ng) %  opa_l3(NSED,NOPA))
      allocate (SEDOPA(ng) %  sed_l3(NSED,NOPA))
      allocate (SEDOPA(ng) %  opa_coll_prob3(NSED,NOPA))

      allocate (SEDOPA(ng) %  sed_g4(NSED,NSED,NSED))
      allocate (SEDOPA(ng) %  sed_l4(NSED,NSED))
      allocate (SEDOPA(ng) %  opa_coll_prob4(NSED,NSED))

#endif

      RETURN
      END SUBROUTINE allocate_sedopa

      
      SUBROUTINE initialize_sedopa (ng, tile, model)

!=======================================================================
!                                                                      !
!  This routine initialize structure variables in the module using     !
!  first touch distribution policy. In shared-memory configuration,    !
!  this operation actually performs the propagation of the "shared     !
!  arrays" across the cluster,  unless another policy is specified     !
!  to  override the default.                                           !
!                                                                      !
!=======================================================================
!
      USE mod_param
      USE mod_sediment
!
!  Imported variable declarations.
!
      integer, intent(in) :: ng, tile, model
!
!  Local variable declarations.
!
      integer, parameter :: NSED=2
      integer, parameter :: NOIL=1
      integer, parameter :: NOPA=4
      integer :: Imin, Imax, Jmin, Jmax
      integer :: i, itrc, j, k

      real(r8), parameter :: IniVal = 0.0_r8

#include "set_bounds.h"
!
!  Set array initialization range.
!
#ifdef _OPENMP
      IF (DOMAIN(ng)%Western_Edge(tile)) THEN
        Imin=BOUNDS(ng)%LBi(tile)
      ELSE
        Imin=Istr
      END IF
      IF (DOMAIN(ng)%Eastern_Edge(tile)) THEN
        Imax=BOUNDS(ng)%UBi(tile)
      ELSE
        Imax=Iend
      END IF
      IF (DOMAIN(ng)%Southern_Edge(tile)) THEN
        Jmin=BOUNDS(ng)%LBj(tile)
      ELSE
        Jmin=Jstr
      END IF
      IF (DOMAIN(ng)%Northern_Edge(tile)) THEN
        Jmax=BOUNDS(ng)%UBj(tile)
      ELSE
        Jmax=Jend
      END IF
#else
      Imin=BOUNDS(ng)%LBi(tile)
      Imax=BOUNDS(ng)%UBi(tile)
      Jmin=BOUNDS(ng)%LBj(tile)
      Jmax=BOUNDS(ng)%UBj(tile)
#endif

!
!-----------------------------------------------------------------------
!  Initialize sediment structure variables.
!-----------------------------------------------------------------------
!
!  Nonlinear model state.
!
      IF ((model.eq.0).or.(model.eq.iNLM)) THEN
        CALL initialize_sedopa_param (ng, tile,                       &
     &                      SEDOPA(ng) %  f_mass,                       & 
     &                      SEDOPA(ng) %  f_diam,                       &
     &                      SEDOPA(ng) %  oil_mass,                     &
     &                      SEDOPA(ng) %  oil_diam,                     &
     &                      SEDOPA(ng) %  opa_mass,                     &
     &                      SEDOPA(ng) %  opa_diam,                     &
     &                      SEDOPA(ng) %  opa_g1,                       &
     &                      SEDOPA(ng) %  oil_l1,                       &
     &                      SEDOPA(ng) %  sed_l1,                       &
     &                      SEDOPA(ng) %  opa_coll_prob1,               &
     &                      SEDOPA(ng) %  opa_oil1,                     &
     &                      SEDOPA(ng) %  opa_g2,                       &
     &                      SEDOPA(ng) %  opa_l2,                       &
     &                      SEDOPA(ng) %  oil_l2,                       &
     &                      SEDOPA(ng) %  opa_coll_prob2,               &
     &                      SEDOPA(ng) %  opa_oil2,                     &
     &                      SEDOPA(ng) %  opa_g3,                       &
     &                      SEDOPA(ng) %  opa_l3,                       &
     &                      SEDOPA(ng) %  sed_l3,                       &
     &                      SEDOPA(ng) %  opa_coll_prob3,               &
     &                      SEDOPA(ng) %  sed_g4,                       &
     &                      SEDOPA(ng) %  sed_l4,                       &
     &                      SEDOPA(ng) %  opa_coll_prob4)
      END IF
!
      RETURN
      END SUBROUTINE initialize_sedopa
!
!***********************************************************************
      SUBROUTINE initialize_sedopa_param (ng, tile,                     &
     &           f_mass,f_diam,oil_mass,oil_diam,opa_mass,opa_diam,     &
     &           opa_g1,oil_l1,sed_l1,opa_coll_prob1,opa_oil1,          &
     &           opa_g2,opa_l2,oil_l2,opa_coll_prob2,opa_oil2,          &
     &           opa_g3,opa_l3,sed_l3,opa_coll_prob3,                   &
     &           sed_g4,sed_l4,opa_coll_prob4)
!***********************************************************************

      USE mod_param
      USE mod_scalars
      USE mod_sediment

      implicit none

!  Imported variable declarations.
!

      integer, intent(in) :: ng, tile
      integer, parameter  :: NSED=2
      integer, parameter  :: NOIL=1
      integer, parameter  :: NOPA=4

      real(r8), intent(inout)  :: f_mass(0:NSED+1)
      real(r8), intent(inout)  :: f_diam(NSED)
      real(r8) :: f_vol(NSED)
      real(r8) :: f_rho(NSED)
      real(r8), intent(inout)  :: oil_mass(NOIL)
      real(r8), intent(inout)  :: oil_diam(NOIL)
      real(r8) :: oil_vol(NOIL)
      real(r8) :: oil_rho(NOIL)
      real(r8), intent(inout)  :: opa_mass(0:NOPA+1)
      real(r8), intent(inout)  :: opa_diam(NOPA)
      real(r8) :: opa_vol(NOPA)
      real(r8) :: opa_rho(NOPA)
      
      real(r8), intent(inout)  :: opa_g1(NOIL,NSED,NOPA)
      real(r8), intent(inout)  :: oil_l1(NOIL,NSED)
      real(r8), intent(inout)  :: sed_l1(NOIL,NSED)
      real(r8), intent(inout)  :: opa_coll_prob1(NOIL,NSED)
      real(r8), intent(inout)  :: opa_oil1(NOIL,NSED,NOPA)

      real(r8), intent(inout)  :: opa_g2(NOIL,NOPA,NOPA)
      real(r8), intent(inout)  :: opa_l2(NOIL,NOPA)
      real(r8), intent(inout)  :: oil_l2(NOIL,NOPA)
      real(r8), intent(inout)  :: opa_coll_prob2(NOIL,NOPA)
      real(r8), intent(inout)  :: opa_oil2(NOIL,NOPA,NOPA)

      real(r8), intent(inout)  :: opa_g3(NSED,NOPA,NOPA)
      real(r8), intent(inout)  :: opa_l3(NSED,NOPA)
      real(r8), intent(inout)  :: sed_l3(NSED,NOPA)
      real(r8), intent(inout)  :: opa_coll_prob3(NSED,NOPA)

      real(r8), intent(inout)  :: sed_g4(NSED,NSED,NSED)
      real(r8), intent(inout)  :: sed_l4(NSED,NSED)
      real(r8), intent(inout)  :: opa_coll_prob4(NSED,NSED)
     
!  Local variable declarations.
!
      real(r8), parameter :: f_dp0  = 0.000001_r8
      real(r8), parameter :: f_nf   = 2.39_r8
      real(r8), parameter :: grav   = 9.81_r8
!      real(r8), parameter :: pi     = 3.14159_r8
!      real(r8), parameter :: Gval   = 8.0_r8
      real(r8), parameter :: rhoref = 1025.0_r8

      real(r8), parameter :: opa_alpha1=0.55_r8    ! oil-sed
      real(r8), parameter :: opa_alpha2=0.55_r8    ! oil-opa
      real(r8), parameter :: opa_alpha3=0.35_r8    ! sed-opa
      real(r8), parameter :: opa_alpha4=0.35_r8    ! sed-sed
!      real(r8) :: f_clim
      real(r8) :: f_weight,mult,tmp,tmp2
      integer  :: iv1,iv2,iv3,iv,itrc
      integer  :: ioil,iopa,ised

      
!!--------------------------------------------------

      opa_diam(1) = 0.256_r8
      opa_diam(2) = 0.63_r8
      opa_diam(3) = 1.024_r8
      opa_diam(4) = 1.8_r8
      oil_diam(1) = 0.1_r8
      oil_rho(1)  = 893.0_r8



!--------------------------------------------------
! floc characteristics
      DO ised=1,NSED
         f_diam(ised)=Sd50(ised,ng)
         f_vol(ised)=pi/6.0_r8*(f_diam(ised))**3.0_r8
         f_rho(ised)=rhoref+(2650.0_r8-rhoref)*                          &
     &     (f_dp0/f_diam(ised))**(3.0_r8-f_nf)
         f_mass(ised)=f_vol(ised)*(f_rho(ised)-rhoref)
      ENDDO
      f_mass(0) = 0.0_r8
      f_mass(NSED+1)=f_mass(NSED)*2.0_r8+1.0_r8
      IF (f_diam(1).eq.f_dp0)  THEN
          f_mass(1)=f_vol(1)*Srho(1,ng)
      ENDIF

!--------------------------------------------------
! OPA characteristics
     DO iopa=1,NOPA
        opa_diam(iopa) = opa_diam(iopa)*0.001_r8
        opa_vol(iopa) = pi/6.0_r8*(opa_diam(iopa))**3.0_r8  ! m-3
        opa_rho(iopa) = rhoref+(2650.0_r8-rhoref)*     &
                        (f_dp0/opa_diam(iopa))**(3.0_r8-f_nf)
        opa_mass(iopa)=opa_vol(iopa)*(opa_rho(iopa)-rhoref)

!           write(*,*) 'OPA ', iopa, 'rho ',opa_rho(iopa)
!           write(*,*) 'OPA ', iopa, 'vol ',opa_vol(iopa)
           write(*,*) 'OPA ', iopa, 'mass ',opa_mass(iopa)
!  settling velocity (Stokes law)
!           opa_ws(iopa) = grav*(opa_rho(iopa)-rhoref)*opa_diam(iopa)**2.0/(18*0.001)
!           write(*,*) 'OPA ', iopa, 'ws ',opa_ws(iopa)
     ENDDO
     opa_mass(0) = 0.0_r8
     opa_mass(NOPA+1) = opa_mass(NOPA)*2.0_r8+1.0_r8

!--------------------------------------------------
! oil characteristics
     DO ioil=1,NOIL
        oil_diam(ioil) = oil_diam(ioil)*0.001_r8
        oil_vol(ioil) = pi/6.0_r8*(oil_diam(ioil))**3.0_r8
        oil_mass(ioil) = oil_rho(ioil)*oil_vol(ioil)
     ENDDO


     WRITE(*,*) ' '
     WRITE(*,*) '*** OPAMOD INIT *** '
     WRITE(*,*) 'NAT, NPT, NSED, NNS:', NAT,NPT,NSED,NNS

!!--------------------------------------------------------------------------
!! kernels computation
!!--------------------------------------------------------------------------
! compute collision probability

! OIL-SEDIMENT
      DO iv1=1,NOIL
        DO iv2=1,NSED
          opa_coll_prob1(iv1,iv2)=1.0_r8/6.0_r8*(oil_diam(iv1)+  &
                                    f_diam(iv2))**3.0_r8
        ENDDO
      ENDDO

!  OIL-OPA
      DO iv1=1,NOIL
        DO iv2=1,NOPA
          opa_coll_prob2(iv1,iv2)=1.0_r8/6.0_r8*(oil_diam(iv1)+  &
                                    opa_diam(iv2))**3.0_r8
        ENDDO
      ENDDO

! SED-OPA
      DO iv1=1,NSED
        DO iv2=1,NOPA
          opa_coll_prob3(iv1,iv2)=1.0_r8/6.0_r8*(f_diam(iv1)+  &
                                    opa_diam(iv2))**3.0_r8
        ENDDO
      ENDDO

! SED-SED
      DO iv1=1,NSED
        DO iv2=1,NSED
         opa_coll_prob4(iv1,iv2)=1.0_r8/6.0_r8*(f_diam(iv1) +   &
                                    f_diam(iv2))**3.0_r8
        ENDDO
      ENDDO

!********************************************************************************
! Shear agregation : GAIN (opa_g1, opa_g2, opa_g3)
!********************************************************************************
! OILSED
      DO iv1=1,NOPA
       DO iv2=1,NOIL
        DO iv3=1,NSED
!           tmp = f_mass(iv3)/(oil_mass(iv2) + f_mass(iv3))
           tmp = oil_mass(iv2) + f_mass(iv3)
! opa_mass(0:NOPA+1)
           IF(tmp .gt. opa_mass(iv1-1) .and. (tmp .le. opa_mass(iv1))) THEN
              f_weight=(tmp-opa_mass(iv1-1))/(opa_mass(iv1)-opa_mass(iv1-1))

           ELSEIF (tmp .gt. opa_mass(iv1) .and.(tmp .lt. opa_mass(iv1+1))) THEN
              IF (iv1 .eq. NOPA) THEN
                 f_weight=1.0_r8
              ELSE
                 f_weight=1.0_r8-(tmp - opa_mass(iv1))/(opa_mass(iv1+1)-opa_mass(iv1))
              ENDIF

           ELSE
              f_weight=0.0_r8
           ENDIF

! opa_alpha1 (oil-sediment)
           opa_g1(iv2,iv3,iv1)=f_weight*opa_alpha1* &
                 opa_coll_prob1(iv2,iv3)*tmp/opa_mass(iv1)

! track oil in OPA (oil-sed)
! oil loss equals to oil in OPA
           opa_oil1(iv2,iv3,iv1) = f_weight*opa_alpha1*    &
                 opa_coll_prob1(iv2,iv3)  !*oil_mass(iv2)/opa_mass(iv1)

        ENDDO
       ENDDO
      ENDDO

!OILOPA
      DO iv1=1,NOPA
       DO iv2=1,NOIL
! OPA (m, iv1) gain from aggregation from smaller OPA(1:iv1) with oil
!         DO iv3=1,iv1
         DO iv3=1,iv1
!           tmp = opa_mass(iv3)*xs(iv3)/(oil_mass(iv2) + opa_mass(iv3))
           tmp =oil_mass(iv2) + opa_mass(iv3)
! opa_mass(0:NOPA+1)
           IF(tmp .gt.opa_mass(iv1-1) .and. tmp .le. opa_mass(iv1)) THEN
                  f_weight=(tmp-opa_mass(iv1-1))/(opa_mass(iv1)-opa_mass(iv1-1))

           ELSEIF (tmp .gt. opa_mass(iv1) .and. tmp .lt. opa_mass(iv1+1)) THEN
              IF (iv1 .eq. NOPA) THEN
                 f_weight=1.0_r8
              ELSE
                 f_weight=1.0_r8-(tmp - opa_mass(iv1))/(opa_mass(iv1+1)-opa_mass(iv1))
              ENDIF

           ELSE
              f_weight=0.0_r8
           ENDIF

! opa_alpha2 (oil-opa)
           opa_g2(iv2,iv3,iv1)=f_weight*opa_alpha2*    &
                 opa_coll_prob2(iv2,iv3)*tmp/opa_mass(iv1)
! track oil in OPA (oil-OPA)
           opa_oil2(iv2,iv3,iv1) = f_weight*opa_alpha2* &
                 opa_coll_prob2(iv2,iv3)
        ENDDO
       ENDDO
      ENDDO

!SEDOPA
      DO iv1=1,NOPA
       DO iv2=1,NSED
! OPA(m, iv1) gain from smaller opa (1:iv1) with sediment
         DO iv3=1,NOPA
!           tmp = (f_mass(iv2) + opa_mass(iv3)*xs(iv3))/(f_mass(iv2) + opa_mass(iv3))
!           write(*,*) 'tmp=',tmp
           tmp = f_mass(iv2) + opa_mass(iv3)
! opa_mass(0:NOPA+1)
           IF(tmp .gt. opa_mass(iv1-1) .and. tmp .le. opa_mass(iv1)) THEN
              f_weight=(tmp-opa_mass(iv1-1))/(opa_mass(iv1)-opa_mass(iv1-1))

           ELSEIF (tmp .gt. opa_mass(iv1) .and.tmp .lt. opa_mass(iv1+1)) THEN
              IF (iv1 .eq. NOPA) THEN
                 f_weight=1.0_r8
              ELSE
                 f_weight=1.0_r8-(tmp - opa_mass(iv1))/(opa_mass(iv1+1)-opa_mass(iv1))
              ENDIF

           ELSE
              f_weight=0.0_r8
           ENDIF

! opa_alpha3 (sed-opa)
           opa_g3(iv2,iv3,iv1)=f_weight*opa_alpha3*       &
                 opa_coll_prob3(iv2,iv3)*tmp/opa_mass(iv1)
        ENDDO
       ENDDO
      ENDDO

! SED-SED
      DO iv1=1,NSED
        DO iv2=1,NSED
          DO iv3=iv2,NSED
            tmp = f_mass(iv2) + f_mass(iv3)
            IF((tmp .gt. f_mass(iv1-1) .and. (tmp .le. f_mass(iv1)))) THEN
              f_weight=(tmp-f_mass(iv1-1))/(f_mass(iv1)-f_mass(iv1-1))

            ELSEIF ((tmp .gt. f_mass(iv1) .and.(tmp .lt. f_mass(iv1+1)))) THEN
              IF (iv1 .eq. NSED) THEN
                 f_weight=1.0_r8
              ELSE
                 f_weight=1.0_r8-(tmp - f_mass(iv1))/(f_mass(iv1+1)-f_mass(iv1))
              ENDIF

            ELSE
              f_weight=0.0_r8
            ENDIF

! opa_alpha4 (sed-sed)
           sed_g4(iv2,iv3,iv1)=f_weight*opa_alpha4*       &
                               opa_coll_prob4(iv2,iv3)*tmp/f_mass(iv1)
!           print*,'kernel,sed_g4',sed_g4(iv2,iv3,iv1)

          ENDDO
        ENDDO
      ENDDO

!********************************************************************************
!  Shear agregation : LOSS : opa_l2,opa_l3,oil_l1,oil_l2,sed_l1,sed_l3
!********************************************************************************

!OILSED
      DO iv1=1,NOIL
       DO iv2=1,NSED
        oil_l1(iv1,iv2)=opa_alpha1*opa_coll_prob1(iv1,iv2)
        sed_l1(iv1,iv2)=opa_alpha1*opa_coll_prob1(iv1,iv2)
       ENDDO
      ENDDO

!OILOPA
      DO iv1=1,NOIL
       DO iv2=1,NOPA
        oil_l2(iv1,iv2)=opa_alpha2*opa_coll_prob2(iv1,iv2)
        opa_l2(iv1,iv2)=opa_alpha2*opa_coll_prob2(iv1,iv2)
       ENDDO
      ENDDO

!SEDOPA
      DO iv1=1,NSED
       DO iv2=1,NOPA
        sed_l3(iv1,iv2)=opa_alpha3*opa_coll_prob3(iv1,iv2)
        opa_l3(iv1,iv2)=opa_alpha3*opa_coll_prob3(iv1,iv2)
       ENDDO
      ENDDO

!SEDFSED
      DO iv1=1,NSED
        DO iv2=1,NSED

         if(iv2 .eq. iv1) then
           mult = 2.0_r8
         else
           mult = 1.0_r8
         endif

         sed_l4(iv2,iv1) = mult*opa_alpha4*opa_coll_prob4(iv2,iv1)

        ENDDO
      ENDDO


      write(*,*) 'Sum of kernal coefficients:'
      write(*,*) 'opa_coll_prob1',sum(opa_coll_prob1)
      write(*,*) 'opa_coll_prob2',sum(opa_coll_prob2)
      write(*,*) 'opa_coll_prob3',sum(opa_coll_prob3)
      write(*,*) 'opa_coll_prob4',sum(opa_coll_prob4)
      write(*,*) 'opa_g1',sum(opa_g1)
      write(*,*) 'opa_g2',sum(opa_g2)
      write(*,*) 'opa_g3',sum(opa_g3)
      write(*,*) 'opa_l2',sum(opa_l2)
      write(*,*) 'opa_l3',sum(opa_l3)
      write(*,*) 'oil_l1',sum(oil_l1)
      write(*,*) 'oil_l2',sum(oil_l2)
      write(*,*) 'sed_l1',sum(sed_l1)
      write(*,*) 'sed_l3',sum(sed_l3)
      write(*,*) 'sed_g4',sum(sed_g4)
      write(*,*) 'sed_l4',sum(sed_l4)
      write(*,*) 'opa_oil1',sum(opa_oil1)
      write(*,*) 'opa_oil2',sum(opa_oil2)
      write(*,*) '***END OPAMOD INIT ***'

     RETURN
     END SUBROUTINE initialize_sedopa_param
